diff --git a/src/test/java/org/apache/tika/mime/MimeTypes_ESTest.java b/src/test/java/org/apache/tika/mime/MimeTypes_ESTest.java
new file mode 100644
index 000000000..d55c999f6
--- /dev/null
+++ b/src/test/java/org/apache/tika/mime/MimeTypes_ESTest.java
@@ -0,0 +1,601 @@
+/*
+ * This file was automatically generated by EvoSuite
+ * Thu Jul 18 11:04:46 GMT 2019
+ */
+
+package org.apache.tika.mime;
+
+import org.junit.Test;
+import static org.junit.Assert.*;
+import static org.evosuite.runtime.EvoAssertions.*;
+import java.io.File;
+import java.net.URI;
+import java.net.URL;
+import java.util.regex.PatternSyntaxException;
+import org.apache.commons.logging.impl.Jdk14Logger;
+import org.apache.commons.logging.impl.Log4JCategoryLog;
+import org.apache.commons.logging.impl.Log4JLogger;
+import org.apache.commons.logging.impl.NoOpLog;
+import org.apache.commons.logging.impl.SimpleLog;
+import org.apache.log4j.Logger;
+import org.apache.tika.mime.Clause;
+import org.apache.tika.mime.Magic;
+import org.apache.tika.mime.MimeType;
+import org.apache.tika.mime.MimeTypes;
+import org.dom4j.QName;
+import org.dom4j.dom.DOMDocument;
+import org.dom4j.dom.DOMElement;
+import org.evosuite.runtime.EvoRunner;
+import org.evosuite.runtime.EvoRunnerParameters;
+import org.evosuite.runtime.mock.java.io.MockFile;
+import org.evosuite.runtime.mock.java.net.MockURI;
+import org.evosuite.runtime.mock.java.net.MockURL;
+import org.junit.runner.RunWith;
+import org.w3c.dom.Document;
+
+@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
+public class MimeTypes_ESTest extends MimeTypes_ESTest_scaffolding {
+
+  @Test(timeout = 4000)
+  public void test00()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes("/V[o|+m~z<q[),}m4");
+      MimeType mimeType0 = new MimeType("application/octet-stream");
+      Magic magic0 = new Magic();
+      Clause.False clause_False0 = (Clause.False)Clause.FALSE;
+      magic0.setClause(clause_False0);
+      mimeType0.addMagic(magic0);
+      mimeTypes0.add(mimeType0);
+      mimeTypes0.add(mimeType0);
+      assertEquals("application", mimeType0.getPrimaryType());
+  }
+
+  @Test(timeout = 4000)
+  public void test01()  throws Throwable  {
+      MimeType mimeType0 = new MimeType("application/octet-stream");
+      Magic magic0 = new Magic(8);
+      Clause.False clause_False0 = (Clause.False)Clause.FALSE;
+      magic0.setClause(clause_False0);
+      mimeType0.addMagic(magic0);
+      Magic magic1 = new Magic(8);
+      // Undeclared exception!
+      try { 
+        mimeType0.addMagic(magic1);
+        fail("Expecting exception: NullPointerException");
+      
+      } catch(NullPointerException e) {
+         //
+         // no message in exception (getMessage() returned null)
+         //
+         verifyException("org.apache.tika.mime.Magic", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test02()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes("/V[o|+m~z<q[),}m4");
+      MimeType mimeType0 = new MimeType("application/octet-stream");
+      Magic magic0 = new Magic();
+      mimeType0.addMagic(magic0);
+      Magic magic1 = new Magic(8);
+      mimeType0.addMagic(magic1);
+      mimeTypes0.add(mimeType0);
+      // Undeclared exception!
+      try { 
+        mimeTypes0.add(mimeType0);
+        fail("Expecting exception: NullPointerException");
+      
+      } catch(NullPointerException e) {
+         //
+         // no message in exception (getMessage() returned null)
+         //
+         verifyException("org.apache.tika.mime.Magic", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test03()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes("/V[o|+m~z<q[),}m4");
+      MimeType mimeType0 = new MimeType("application/octet-stream");
+      Magic magic0 = new Magic();
+      mimeType0.addMagic(magic0);
+      mimeTypes0.add(mimeType0);
+      URI uRI0 = MockURI.aFTPURI;
+      URL uRL0 = MockURI.toURL(uRI0);
+      MimeType mimeType1 = mimeTypes0.getMimeType(uRL0);
+      assertTrue(mimeType1.hasMagic());
+  }
+
+  @Test(timeout = 4000)
+  public void test04()  throws Throwable  {
+      Jdk14Logger jdk14Logger0 = new Jdk14Logger("-wQk*");
+      MimeTypes mimeTypes0 = new MimeTypes("-wQk*", jdk14Logger0);
+      MimeType mimeType0 = new MimeType("application/octet-stream");
+      mimeTypes0.add(mimeType0);
+      URL uRL0 = MockURL.getFileExample();
+      MimeType mimeType1 = mimeTypes0.getMimeType(uRL0);
+      assertEquals("octet-stream", mimeType1.getSubType());
+  }
+
+  @Test(timeout = 4000)
+  public void test05()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes("/V[o|+m~z<q[),}m4");
+      MimeType mimeType0 = new MimeType("application/octet-stream");
+      Magic magic0 = new Magic(1955);
+      Clause.False clause_False0 = (Clause.False)Clause.FALSE;
+      magic0.setClause(clause_False0);
+      mimeType0.addMagic(magic0);
+      mimeTypes0.add(mimeType0);
+      byte[] byteArray0 = new byte[3];
+      MimeType mimeType1 = mimeTypes0.getMimeType("", byteArray0);
+      assertEquals("octet-stream", mimeType1.getSubType());
+  }
+
+  @Test(timeout = 4000)
+  public void test06()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes("/V[o|+m~z<q[),}m4");
+      MimeType mimeType0 = new MimeType("application/octet-stream");
+      Magic magic0 = new Magic(1955);
+      mimeType0.addMagic(magic0);
+      mimeTypes0.add(mimeType0);
+      MimeType mimeType1 = mimeTypes0.getMimeType("\"");
+      assertEquals("application", mimeType1.getPrimaryType());
+  }
+
+  @Test(timeout = 4000)
+  public void test07()  throws Throwable  {
+      Jdk14Logger jdk14Logger0 = new Jdk14Logger("-wQk*");
+      MimeTypes mimeTypes0 = new MimeTypes("-wQk*", jdk14Logger0);
+      MimeType mimeType0 = new MimeType("application/octet-stream");
+      mimeTypes0.add(mimeType0);
+      MimeType mimeType1 = mimeTypes0.getMimeType("fI5<C O6XEGu&l'f");
+      assertEquals("octet-stream", mimeType1.getSubType());
+  }
+
+  @Test(timeout = 4000)
+  public void test08()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes("/V[o|+m~z<q[),}m4");
+      MimeType mimeType0 = new MimeType("application/octet-stream");
+      Magic magic0 = new Magic(1955);
+      mimeType0.addMagic(magic0);
+      mimeTypes0.add(mimeType0);
+      MockFile mockFile0 = new MockFile("application/octet-stream", "");
+      MimeType mimeType1 = mimeTypes0.getMimeType((File) mockFile0);
+      assertEquals("application/octet-stream", mimeType1.getName());
+  }
+
+  @Test(timeout = 4000)
+  public void test09()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes("/V[o|+m~z<q[),}m4");
+      MimeType mimeType0 = new MimeType("application/octet-stream");
+      mimeTypes0.add(mimeType0);
+      MockFile mockFile0 = new MockFile("/V[o|+m~z<q[),}m4");
+      MimeType mimeType1 = mimeTypes0.getMimeType((File) mockFile0);
+      assertSame(mimeType1, mimeType0);
+  }
+
+  @Test(timeout = 4000)
+  public void test10()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes("/V[o|+m~z<q[),}m4");
+      MimeType mimeType0 = new MimeType("application/octet-stream");
+      Magic magic0 = new Magic(1955);
+      mimeType0.addMagic(magic0);
+      mimeTypes0.add(mimeType0);
+      MimeType mimeType1 = mimeTypes0.forName("application/octet-stream");
+      assertSame(mimeType1, mimeType0);
+  }
+
+  @Test(timeout = 4000)
+  public void test11()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes("org.apache.tika.mime.MimeTypes$1");
+      // Undeclared exception!
+      try { 
+        mimeTypes0.getMimeType((URL) null);
+        fail("Expecting exception: NullPointerException");
+      
+      } catch(NullPointerException e) {
+         //
+         // no message in exception (getMessage() returned null)
+         //
+         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test12()  throws Throwable  {
+      Log4JLogger log4JLogger0 = new Log4JLogger("");
+      MimeTypes mimeTypes0 = new MimeTypes("org.apache.tika.mime.MimeTypes$1", log4JLogger0);
+      // Undeclared exception!
+      try { 
+        mimeTypes0.getMimeType((String) null);
+        fail("Expecting exception: NullPointerException");
+      
+      } catch(NullPointerException e) {
+         //
+         // no message in exception (getMessage() returned null)
+         //
+         verifyException("org.apache.tika.mime.MimeTypes", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test13()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes("org.apache.tika.mime.MimeTypes");
+      MimeType mimeType0 = new MimeType("application/octet-stream");
+      MimeType[] mimeTypeArray0 = new MimeType[2];
+      mimeType0.addPattern("G.^d)%T0B2[");
+      mimeTypeArray0[0] = mimeType0;
+      mimeTypes0.add(mimeTypeArray0);
+      MockFile mockFile0 = new MockFile("4ZG");
+      // Undeclared exception!
+      try { 
+        mimeTypes0.getMimeType((File) mockFile0);
+        fail("Expecting exception: PatternSyntaxException");
+      
+      } catch(PatternSyntaxException e) {
+         //
+         // Unmatched closing ')' near index 3\r
+         // G.^d)%T0B2[\r
+         //    ^
+         //
+         verifyException("java.util.regex.Pattern", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test14()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes(")8!DWtA");
+      // Undeclared exception!
+      try { 
+        mimeTypes0.getMimeType((File) null);
+        fail("Expecting exception: NullPointerException");
+      
+      } catch(NullPointerException e) {
+         //
+         // no message in exception (getMessage() returned null)
+         //
+         verifyException("org.apache.tika.mime.MimeTypes", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test15()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes("/V[o|+m~z<q[),}m4");
+      MimeType mimeType0 = new MimeType("application/octet-stream");
+      Magic magic0 = new Magic(1955);
+      mimeType0.addMagic(magic0);
+      mimeTypes0.add(mimeType0);
+      MimeType[] mimeTypeArray0 = new MimeType[5];
+      mimeTypeArray0[0] = mimeType0;
+      // Undeclared exception!
+      try { 
+        mimeTypes0.add(mimeTypeArray0);
+        fail("Expecting exception: NullPointerException");
+      
+      } catch(NullPointerException e) {
+         //
+         // no message in exception (getMessage() returned null)
+         //
+         verifyException("org.apache.tika.mime.Magic", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test16()  throws Throwable  {
+      NoOpLog noOpLog0 = new NoOpLog();
+      MimeTypes mimeTypes0 = null;
+      try {
+        mimeTypes0 = new MimeTypes((Document) null, noOpLog0);
+        fail("Expecting exception: NullPointerException");
+      
+      } catch(NullPointerException e) {
+         //
+         // no message in exception (getMessage() returned null)
+         //
+         verifyException("org.apache.tika.mime.MimeTypesReader", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test17()  throws Throwable  {
+      Log4JLogger log4JLogger0 = new Log4JLogger();
+      MimeTypes mimeTypes0 = null;
+      try {
+        mimeTypes0 = new MimeTypes("#%aO", log4JLogger0);
+        fail("Expecting exception: NullPointerException");
+      
+      } catch(NullPointerException e) {
+         //
+         // no message in exception (getMessage() returned null)
+         //
+         verifyException("org.apache.log4j.CategoryKey", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test18()  throws Throwable  {
+      Class<String> class0 = String.class;
+      Logger logger0 = Logger.getLogger(class0);
+      Log4JCategoryLog log4JCategoryLog0 = new Log4JCategoryLog(logger0);
+      MimeTypes mimeTypes0 = null;
+      try {
+        mimeTypes0 = new MimeTypes("%@,@a\"S_CG:~*", log4JCategoryLog0);
+        fail("Expecting exception: NoSuchMethodError");
+      
+      } catch(NoSuchMethodError e) {
+         //
+         // org.apache.log4j.Category.isEnabledFor(Lorg/apache/log4j/Level;)Z
+         //
+         verifyException("org.apache.commons.logging.impl.Log4JCategoryLog", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test19()  throws Throwable  {
+      Log4JCategoryLog log4JCategoryLog0 = new Log4JCategoryLog();
+      MimeTypes mimeTypes0 = null;
+      try {
+        mimeTypes0 = new MimeTypes("", log4JCategoryLog0);
+        fail("Expecting exception: NoClassDefFoundError");
+      
+      } catch(NoClassDefFoundError e) {
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test20()  throws Throwable  {
+      MimeTypes mimeTypes0 = null;
+      try {
+        mimeTypes0 = new MimeTypes((String) null);
+        fail("Expecting exception: NullPointerException");
+      
+      } catch(NullPointerException e) {
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test21()  throws Throwable  {
+      MimeTypes mimeTypes0 = null;
+      try {
+        mimeTypes0 = new MimeTypes("");
+        fail("Expecting exception: NoClassDefFoundError");
+      
+      } catch(NoClassDefFoundError e) {
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test22()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes("org.apache.tika.mime.MimeTypes");
+      MimeType mimeType0 = new MimeType("application/octet-stream");
+      MimeType[] mimeTypeArray0 = new MimeType[2];
+      mimeType0.addSuperType("org.apache.tika.mime.MimeTypes");
+      mimeTypeArray0[0] = mimeType0;
+      mimeTypes0.add(mimeTypeArray0);
+      mimeTypes0.add(mimeTypeArray0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+  }
+
+  @Test(timeout = 4000)
+  public void test23()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes("/V[o|+m~z<q[),}m4");
+      MimeType mimeType0 = new MimeType("application/octet-stream");
+      mimeTypes0.add(mimeType0);
+      MimeType mimeType1 = mimeTypes0.forName("application/octet-stream");
+      assertNull(mimeType1.getDescription());
+  }
+
+  @Test(timeout = 4000)
+  public void test24()  throws Throwable  {
+      Jdk14Logger jdk14Logger0 = new Jdk14Logger("-wQk*");
+      MimeTypes mimeTypes0 = new MimeTypes("-wQk*", jdk14Logger0);
+      MimeType mimeType0 = mimeTypes0.forName("fI5<C O6XEGu&l'f");
+      assertNull(mimeType0);
+  }
+
+  @Test(timeout = 4000)
+  public void test25()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes("org.apache.tika.mime.MimeTypes");
+      MimeType mimeType0 = new MimeType("application/octet-stream");
+      MimeType[] mimeTypeArray0 = new MimeType[2];
+      mimeTypeArray0[0] = mimeType0;
+      mimeType0.addRootXML("application/octet-stream", "org.apache.tika.mime.MimeTypes");
+      mimeTypes0.add(mimeTypeArray0);
+      byte[] byteArray0 = new byte[4];
+      MimeType mimeType1 = mimeTypes0.getMimeType(byteArray0);
+      assertNull(mimeType1);
+  }
+
+  @Test(timeout = 4000)
+  public void test26()  throws Throwable  {
+      SimpleLog simpleLog0 = new SimpleLog("[");
+      MimeTypes mimeTypes0 = new MimeTypes("[", simpleLog0);
+      byte[] byteArray0 = new byte[0];
+      MimeType mimeType0 = mimeTypes0.getMimeType(byteArray0);
+      assertNull(mimeType0);
+  }
+
+  @Test(timeout = 4000)
+  public void test27()  throws Throwable  {
+      Jdk14Logger jdk14Logger0 = new Jdk14Logger("-wQk*");
+      MimeTypes mimeTypes0 = new MimeTypes("-wQk*", jdk14Logger0);
+      MimeType mimeType0 = mimeTypes0.getMimeType("fI5<C O6XEGu&l'f");
+      assertNull(mimeType0);
+  }
+
+  @Test(timeout = 4000)
+  public void test28()  throws Throwable  {
+      DOMDocument dOMDocument0 = new DOMDocument();
+      MimeTypes mimeTypes0 = new MimeTypes(dOMDocument0);
+      byte[] byteArray0 = new byte[3];
+      // Undeclared exception!
+      try { 
+        mimeTypes0.getMimeType((String) null, byteArray0);
+        fail("Expecting exception: NullPointerException");
+      
+      } catch(NullPointerException e) {
+         //
+         // no message in exception (getMessage() returned null)
+         //
+         verifyException("org.apache.tika.mime.MimeTypes", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test29()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes("/V[o|+m~z<q[),}m4");
+      MimeType mimeType0 = new MimeType("application/octet-stream");
+      mimeTypes0.add(mimeType0);
+      String string0 = mimeTypes0.toString();
+      assertEquals("application/octet-stream -- null\nAliases:  NONE\nPatterns: NONE\nMagics:   NONE\n\n", string0);
+  }
+
+  @Test(timeout = 4000)
+  public void test30()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes("/V[o|+m~z<q[),}m4");
+      String string0 = mimeTypes0.toString();
+      assertEquals("", string0);
+  }
+
+  @Test(timeout = 4000)
+  public void test31()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes("org.apache.tika.mime.MimeTypes");
+      MimeType mimeType0 = new MimeType("application/octet-stream");
+      MimeType[] mimeTypeArray0 = new MimeType[2];
+      mimeType0.addSuperType("application/octet-stream");
+      mimeTypeArray0[0] = mimeType0;
+      mimeTypes0.add(mimeTypeArray0);
+      assertEquals(2, mimeTypeArray0.length);
+  }
+
+  @Test(timeout = 4000)
+  public void test32()  throws Throwable  {
+      NoOpLog noOpLog0 = new NoOpLog();
+      MimeTypes mimeTypes0 = new MimeTypes("+RS54] ?3", noOpLog0);
+      mimeTypes0.add((MimeType[]) null);
+      assertEquals(1024, mimeTypes0.getMinLength());
+  }
+
+  @Test(timeout = 4000)
+  public void test33()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes("/V[o|+m~z<q[),}m4");
+      MimeType mimeType0 = new MimeType("application/octet-stream");
+      Magic magic0 = new Magic();
+      Clause.False clause_False0 = (Clause.False)Clause.FALSE;
+      magic0.setClause(clause_False0);
+      mimeType0.addMagic(magic0);
+      mimeTypes0.add(mimeType0);
+      byte[] byteArray0 = new byte[3];
+      MimeType mimeType1 = mimeTypes0.getMimeType(byteArray0);
+      assertNull(mimeType1);
+  }
+
+  @Test(timeout = 4000)
+  public void test34()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes("/V[o|+m~z<q[),}m4");
+      MimeType mimeType0 = new MimeType("application/octet-stream");
+      Magic magic0 = new Magic();
+      mimeType0.addMagic(magic0);
+      mimeTypes0.add(mimeType0);
+      byte[] byteArray0 = new byte[3];
+      // Undeclared exception!
+      try { 
+        mimeTypes0.getMimeType(byteArray0);
+        fail("Expecting exception: NullPointerException");
+      
+      } catch(NullPointerException e) {
+         //
+         // no message in exception (getMessage() returned null)
+         //
+         verifyException("org.apache.tika.mime.Magic", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test35()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes("org.apache.tika.mime.MimeTypes");
+      MimeType mimeType0 = new MimeType("application/octet-stream");
+      MimeType[] mimeTypeArray0 = new MimeType[2];
+      mimeTypeArray0[0] = mimeType0;
+      mimeType0.addRootXML("application/octet-stream", "org.apache.tika.mime.MimeTypes");
+      mimeTypes0.add(mimeTypeArray0);
+      byte[] byteArray0 = new byte[4];
+      MimeType mimeType1 = mimeTypes0.getMimeType("org.apache.tika.mime.MimeTypes", byteArray0);
+      assertEquals("application", mimeType1.getPrimaryType());
+  }
+
+  @Test(timeout = 4000)
+  public void test36()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes("R}WL[I*BT,F'mSC~");
+      byte[] byteArray0 = new byte[0];
+      MimeType mimeType0 = mimeTypes0.getMimeType("R}WL[I*BT,F'mSC~", byteArray0);
+      assertNull(mimeType0);
+  }
+
+  @Test(timeout = 4000)
+  public void test37()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes("/V[o|+m~z<q[),}m4");
+      MimeType mimeType0 = mimeTypes0.getMimeType((byte[]) null);
+      assertNull(mimeType0);
+  }
+
+  @Test(timeout = 4000)
+  public void test38()  throws Throwable  {
+      MimeTypes mimeTypes0 = null;
+      try {
+        mimeTypes0 = new MimeTypes((Document) null);
+        fail("Expecting exception: NullPointerException");
+      
+      } catch(NullPointerException e) {
+         //
+         // no message in exception (getMessage() returned null)
+         //
+         verifyException("org.apache.tika.mime.MimeTypesReader", e);
+      }
+  }
+
+  @Test(timeout = 4000)
+  public void test39()  throws Throwable  {
+      QName qName0 = QName.get("", "");
+      DOMElement dOMElement0 = new DOMElement(qName0);
+      DOMDocument dOMDocument0 = new DOMDocument(dOMElement0);
+      NoOpLog noOpLog0 = new NoOpLog("");
+      MimeTypes mimeTypes0 = new MimeTypes(dOMDocument0, noOpLog0);
+      assertEquals(1024, mimeTypes0.getMinLength());
+  }
+
+  @Test(timeout = 4000)
+  public void test40()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes("org.apache.tika.mime.MimeTypes");
+      MockFile mockFile0 = new MockFile("4ZG");
+      MimeType mimeType0 = mimeTypes0.getMimeType((File) mockFile0);
+      assertNull(mimeType0);
+  }
+
+  @Test(timeout = 4000)
+  public void test41()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes("/V[o|+m~z<q[),}m4");
+      URI uRI0 = MockURI.aFTPURI;
+      URL uRL0 = MockURI.toURL(uRI0);
+      MimeType mimeType0 = mimeTypes0.getMimeType(uRL0);
+      assertNull(mimeType0);
+  }
+
+  @Test(timeout = 4000)
+  public void test42()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes("R}WL[I*BT,F'mSC~");
+      int int0 = mimeTypes0.getMinLength();
+      assertEquals(1024, int0);
+  }
+
+  @Test(timeout = 4000)
+  public void test43()  throws Throwable  {
+      MimeTypes mimeTypes0 = new MimeTypes("org.apache.tika.mime.MimeTypes");
+      MimeType mimeType0 = new MimeType("application/octet-stream");
+      MimeType[] mimeTypeArray0 = new MimeType[2];
+      mimeTypeArray0[0] = mimeType0;
+      mimeType0.addRootXML("application/octet-stream", "org.apache.tika.mime.MimeTypes");
+      mimeTypes0.add(mimeTypeArray0);
+      mimeTypes0.add(mimeType0);
+      assertEquals("octet-stream", mimeType0.getSubType());
+  }
+}
